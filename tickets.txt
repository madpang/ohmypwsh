+++ header
@file: ohmypwsh/tickets.txt
+++

=== Ticket 1

@brief:
Create a oh-my-zsh inspired PowerShell custom prompt, w/ light/dark theme.

@status: DONE

@date:
- created on 2024-11-16
- updated on 2024-11-23

--- Ticket 1-1

@brief:
Add proper color scheme for the 3 major fields of terminal prompt---user name, machine name, and path.

@status: DONE

@date:
- created on 2024-11-16
- updated on 2024-11-23

@details:
Need to use a hashtable to hold each prompt color component in a separate field.
In the past, I have spent quite a lot of time on an utility `SwitchTheme` that switches not only the terminmal prompt, but also macOS system wide dark/light theme, with automatical trigger by sunrise/sunset.
This time, I plan to create a PowerShell function `Switch-Theme ['dark' | 'light']`.
Given those experience tweaking w/ system-wide theme altogether, I decide this function should go into the platform-dependent utility category, and I first implement it in `macos-pwsh-conf.ps1`.

--- Ticket 1-2

@brief:
Configure the [PSReadline](https://github.com/PowerShell/PSReadLine) color scheme to suit my light/dark theme.

@status: DONE

@date:
- created on 2024-11-23
- updated on 2024-11-23

@details:
Although the PSReadLine affects most of the "readline", not rigorously the prompt itself, together w/ the prompt, it is important for the user experience (UX) in the Read–eval–print loop (REPL) framework. Therefore, I consider this as a sub-task for creating the light/dark theme.
I plan to use minimal color for the readline, since using many colors will only result in a visual chaos.
As colors should only be used sporadically, they should be *pop-up*.
As for the light theme, which will generally based on a white background, I prefer *blue* as the main color.
As for the dark theme, which will generally based on a near-black background, I prefer *yellow* as the main color.

=== Ticket 2

@brief:
Add `Mount-Workspace` command.

@status: DONE

@date:
- created on 2025-01-16
- updated on 2025-01-16

@details:
The command `Mount-Workspace` mounts remote storage into local file-system as "Workspace[\d]".
This command should be *machine-dependent*, since each machine is used in specific setup (w/ different local Workspace, and available remote Workspaces).

--- Ticket 2-1

@brief:
Add `Mount-Workspace` for my personal Mac to mount the routine remote workspace, as a pilot test.

@date:
- created on 2025-01-16
- updated on 2025-01-18

@status: DONE

@details:
- The function only handles a specific workspace Identifier `W4`
- It should hard-code NO secret in the script
- The function call requires all parameters to be passed in, including the remote storage URL, the local mount point, and the username/password.

--- Ticket 2-2

@brief:
Make `Mount-Workspace W4` work as it is, w/o provide any additional parameters.

@status: DONE

@date:
- created on 2025-01-18
- updated on 2025-01-19

@details:
By using an external JSON file, the function can auto load the parameters (w/o cache) per call, and fill all the necessary parameters for the `Mount-Workspace` function.
As long as the JSON file is not exposed to the public, the secret info. should be safe.
Beyonds that, I added one more layer of security---instead of reading info. from a plain JSON file, I use an GPG-encrypted JSON file, and decrypt it on-the-fly.
This method fits well for the scenario of *device-dependent* `Mount-Workspace` function.

=== Ticket 3

@brief:
Make sourcing device-dependent conf. script configurable.

@status: DONE

@date:
- created on 2025-01-19
- updated on 2025-01-26

@details:
See README [Usage] -> [To add device-dependent configurations] for details.

=== Ticket 4

@brief:
Redesign the prompt style, to be visually more appealing, and informative.

@status: TODO

@date:
- created on 2025-01-19
- updated on 2025-01-19

@details:
The current prompt is like 
+++ prompt example
|-[user@machine: path][]
: <command>
|-[YYYY-MM-DDTHH:MM:SS+08:00][o][]
+++
the density of this prompt is too high.

=== Ticket 5

@brief:
Redesign the `Switch-Theme` function to be more user-friendly.

@status: TODO

@date:
- created on 2025-01-19
- updated on 2025-01-19

@details:
One needs to review the design principle---whether it should only use ANSI escape code feature, or it should be coupled w/ the Terminal app.

=== Ticket 6

@brief:
Bug report, `Remove-Workspace` fails if the workspace is not mounted.

@status: DONE

@date:
- created on 2025-01-25
- updated on 2025-01-26

@details:
If the directory---e.g. `~/Workspace4`---is not a mount point, but merely a local directory, the `Remove-Workspace` function will fail.
In this case, the function should not just fail, but clean up the directory, and print a message to the user.

=== Ticket 7

@brief:
Request for a installation script.

@status: TODO

@date:
- created on 2025-01-25
- updated on 2025-01-25

@details:
The installation script should be able to install the `ohmypwsh` package to a new machine, and configure the device-dependent conf. file.

=== Ticket 8

@brief:
Make path displayed in the prompt respect symbolic links.

@status: TODO

@date:
- created on 2025-01-25
- updated on 2025-01-25

@details:
Currently, the path displayed in the prompt is the real path, not the symbolic link path.
For example, if `~/Workspace3` is a symbolic link to ` /Volumes/WKSP`, when I `cd ~/Workspace3`, the prompt will show `/Volumes/WKSP`, not `~/Workspace3`.

=== Ticket 9

@brief:
The exit code of the last command is eaten by the prompt.

@status: DONE

@date:
- created on 2025-01-25
- updated on 2025-01-27

@details:
This issue is identified during the investigation of [Ticket 7].
If `~/Workspace5` is not a mount point, executing the command `diskutil unmount Workspace5` will fail.
While in a shell started w/ `pwsh --noprofile`, checking `$LASTEXITCODE` will return `1`, but in the `ohmypwsh` prompt, it will return `0`.

The reason is that `$(pwd)` was used in the `prompt` function---where `pwd` is an external command---which will always return `0` as the exit code.
To fix this, `$(pwd)` is replaced by `$PWD.ToString()`.

=== Ticket 10

@brief:
Limit the prompt length.

@status: TODO

@date:
- created on 2025-01-26
- updated on 2025-01-26

@details:
The current prompt has no control on the total length.
When the path is deep, it may get auto-wrapped, leading to a messy display.

=== Ticket 11

@brief:
Make `Remove-Workspace` no need to read the encrypted workspace information file for every run.

@status: TODO

@date:
- created on 2025-01-26
- updated on 2025-01-26

@details:
Removing a workspace should NOT need user name or password.
It only needs to know the mount point, given a user defined workspace ID.
So, if the ID is cached, the function should be able to remove the workspace w/o reading the encrypted workspace information file.

NOTE, reading the encrypted workspace information file will prompt for the passphrase, an avoiding it is an improvement on UX.

=== Ticket 12

@brief:
Bug report, `Mount-RemoteVolume` spit internal error when `mount` fails.

@status: PROGRESSING

@date:
- created on 2025-01-26
- updated on 2025-02-02

@details:
When calling `Mount-Workspace W4` (which calls `Mount-RemoteVolume`), if the remote volume is not available, the `mount` command will fail, and the function will spit an internal error.
+++ console output
mount_smbfs: server connection failed: No route to host
mount: /Users/foo/Workspace4 failed with 68
Mount-RemoteVolume: /Volumes/WKSP/git-repo/ohmypwsh/conf/device-00-pwsh-conf.ps1:52
Line |
  52 |          Mount-RemoteVolume `
     |          ~~~~~~~~~~~~~~~~~~~~
     | Failed to mount at '~/Workspace4'.
+++
which is NOT a graceful handling of the error.

I find the reason is that `Write-Error` generates non-terminating error (when used w/o `-ErrorAction Stop`), which do not trigger the `catch`.
Therefore, the error propagates to the caller, and leaves a call stack in the console.
This behavior is described in PowerShell's document---[Everything you wanted to know about exceptions]---which states
>>>
The one thing that I don't like about using throw for raw exceptions is that the error message points at the throw statement and indicates that line is where the problem is.
+++ console output
Unable to find the specified file.
At line:31 char:9
+         throw [System.IO.FileNotFoundException]::new()
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OperationStopped: (:) [], FileNotFoundException
    + FullyQualifiedErrorId : Unable to find the specified file.
+++
Having the error message tell me that my script is broken because I called throw on line 31 is a bad message for users of your script to see. It doesn't tell them anything useful.
<<<
It describes the exact situation I am facing.

Basically, I am using the technique of `$PSCmdlet.ThrowTerminatingError($PSItem)`, which is described in the document as
>>>
One nuance of $PSCmdlet.ThrowTerminatingError() is that it creates a terminating error within your Cmdlet but it turns into a non-terminating error after it leaves your Cmdlet. This leaves the burden on the caller of your function to decide how to handle the error. They can turn it back into a terminating error by using -ErrorAction Stop or calling it from within a try{...}catch{...}.
<<<
as well as *typed exception* to address the issue of this ticket.

@see:
- [Everything you wanted to know about exceptions](https://learn.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-exceptions?view=powershell-7.4)
- [about_Try_Catch_Finally](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_try_catch_finally?view=powershell-7.4)
- [Write-Error](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/write-error?view=powershell-7.4)

=== Ticket 13

@brief:
Implement `open` command on Linux to open folder at current directory in GUI.

@status: TODO

@date:
- created on 2025-02-02
- updated on 2025-02-02

@see:
- [Question on StackExchange](https://askubuntu.com/questions/265641/how-to-open-a-folder-with-gui-from-terminal)
